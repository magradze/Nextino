/**
 * @file        main.cpp
 * @title       Nextino Plug-and-Play Demo
 * @description This file demonstrates the core "Plug-and-Play" philosophy of the
 *              Nextino framework. It acts as the "assembler" for the application.
 *
 * @author      Giorgi Magradze
 * @date        2025-08-19
 * @version     0.1.0
 */

#include <Arduino.h>
#include <Nextino.h>

// This header is auto-generated by the Nextino build script (`bootstrap.py`).
#include "generated_config.h"

void setup() {
    // Step 1: Initialize the Logger as the very first action.
    Logger::getInstance().begin(LogLevel::Debug);

    NEXTINO_LOGI("Main", "--- Nextino Auto-Discovery Project ---");

    // Step 2: Register all discovered module types with the ModuleFactory.
    registerAllModuleTypes();

    // Step 3: Read the auto-generated configuration and create module instances.
    NEXTINO_LOGI("Main", "Reading project configuration and creating modules...");
    JsonDocument doc;
    deserializeJson(doc, projectConfigJson);
    JsonArray modulesConfig = doc["modules"];

    for (JsonObject moduleConf : modulesConfig)
    {
        const char *type = moduleConf["type"];
        JsonObject config = moduleConf["config"];

        BaseModule *module = NextinoFactory().createModule(type, config);
        if (module)
        {
            // Step 4: Register the created module instance with the SystemManager.
            NextinoSystem().registerModule(module);
        }
    }

    // Step 5: Start the Nextino system.
    // This will call init() and start() on all modules that were just registered.
    NEXTINO_LOGI("Main", "Starting Nextino system...");
    NextinoSystem().begin();
    
    NEXTINO_LOGI("Main", "System is running.");
}

void loop()
{
    NextinoSystem().loop();
}