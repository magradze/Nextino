# extras/scripts/nextino_scripts/mqtt_generator.py
"""
This module generates the `generated_mqtt.h` header file.
It creates C++ namespaces and constexpr variables for all MQTT topics
defined in the project's module configurations, providing a
"Single Source of Truth" for topics.
"""

# The name of the header file to be generated.
GENERATED_HEADER_NAME = "generated_mqtt.h"

def _sanitize_name_for_cpp(name):
    """
    Sanitizes a string to be a valid C++ namespace/variable name.
    Replaces hyphens and other invalid characters with underscores.
    """
    return name.replace("-", "_").replace(" ", "_")

def generate_mqtt_header(module_data):
    """
    Generates the full content for the `generated_mqtt.h` file.
    """
    mqtt_interfaces = module_data.get("mqtt_interfaces", [])
    if not mqtt_interfaces:
        return None # Return None if there are no MQTT interfaces to generate

    namespaces = []

    for item in mqtt_interfaces:
        instance_name = item.get("instance_name")
        module_type = item.get("module_type")
        interface = item.get("interface", {})
        
        # Create a unique namespace for this instance, e.g., MqttTopics_LedModule_status_led
        namespace_name = f"MqttTopics_{_sanitize_name_for_cpp(module_type)}_{_sanitize_name_for_cpp(instance_name)}"
        
        lines = [f"namespace {namespace_name} {{"]
        
        # Process 'publishes' topics
        publishes = interface.get("publishes", {})
        for name, data in publishes.items():
            topic = data.get("topic", "").replace("{instance_name}", instance_name)
            lines.append(f'    constexpr const char* {name.upper()} = "{topic}";')

        # Process 'subscribes' topics
        subscribes = interface.get("subscribes", {})
        for name, data in subscribes.items():
            topic = data.get("topic", "").replace("{instance_name}", instance_name)
            lines.append(f'    constexpr const char* {name.upper()} = "{topic}";')

        lines.append(f"}} // namespace {namespace_name}")
        namespaces.append("\n".join(lines))
    
    namespaces_string = "\n\n".join(namespaces)

    header_content = f"""/*
 * This file is automatically generated by the Nextino build script.
 * Do not edit this file manually.
 * It contains all MQTT topics defined in your module configurations.
 */
#pragma once

namespace NextinoMqtt {{

{namespaces_string}

}} // namespace NextinoMqtt
"""
    return header_content