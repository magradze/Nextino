# extra_scripts/nextino_scripts/code_generator.py
"""
This module is responsible for generating the C++ header file (`generated_config.h`)
based on the processed module data.
"""

import json

# The name of the header file to be generated.
GENERATED_HEADER_NAME = "generated_config.h"

def generate_header_file(module_data):
    """
    Generates the full content for the `generated_config.h` file.

    Args:
        module_data (dict): A dictionary from the config_aggregator containing
                            module data.

    Returns:
        str: The complete C++ header file content as a string.
    """
    
    # Extract data for easier access
    module_configs = module_data.get("configs", [])
    module_headers = module_data.get("headers", [])
    module_class_names = module_data.get("class_names", [])

    # Create the final JSON object to be embedded in the header
    final_config_dict = {"modules": module_configs}
    final_json_string = json.dumps(final_config_dict, indent=2)

    # Generate the #include directives
    headers_string = "\n".join(module_headers)

    # Generate the registration calls for the registerAllModuleTypes() function
    registration_lines = [
        f'    NextinoFactory().registerModule("{name}", {name}::create);'
        for name in module_class_names
    ]
    registrations_string = "\n".join(registration_lines)

    # Assemble the final header content using an f-string
    header_content = f"""/*
 * This file is automatically generated by the Nextino build script.
 * Do not edit this file manually.
 */
#pragma once
#include <Nextino.h>

// Include headers for all discovered modules
{headers_string}

// Aggregated JSON configuration for the entire project
const char* projectConfigJson = R"json(
{final_json_string}
)json";

// Function to register all module types with the ModuleFactory
void registerAllModuleTypes() {{
{registrations_string}
}}
"""
    return header_content